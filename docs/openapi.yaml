openapi: 3.0.3
info:
  title: Blog API
  version: 1.0.0
  description: |
    API REST para gerenciamento de blog com autenticação JWT.
    
    Esta API permite:
    - Registrar e autenticar usuários
    - Gerenciar usuários (criar, listar, atualizar, deletar)
    - Controle de acesso baseado em roles (USER, ADMIN)
    
    ## Autenticação
    A maioria dos endpoints requer autenticação via token JWT.
    
    Para autenticar:
    1. Faça login usando o endpoint `/api/blog/auth/login`
    2. Use o token retornado no header Authorization: `Bearer {token}`
    
  contact:
    name: Luca5Eckert
    url: https://github.com/Luca5Eckert/blog-api
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Servidor de desenvolvimento

tags:
  - name: Autenticação
    description: Endpoints para registro e login de usuários
  - name: Usuários
    description: Endpoints para gerenciamento de usuários

paths:
  /api/blog/auth/register:
    post:
      tags:
        - Autenticação
      summary: Registrar novo usuário
      description: Cria um novo usuário no sistema com as credenciais fornecidas
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
            examples:
              exemplo1:
                summary: Criar usuário comum
                value:
                  name: João Silva
                  email: joao@example.com
                  password: SenhaForte123!
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisterResponse'
              examples:
                exemplo1:
                  summary: Usuário criado
                  value:
                    id: 1
                    name: João Silva
                    email: joao@example.com
                    roleUser: USER
        '400':
          description: Dados inválidos fornecidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/blog/auth/login:
    post:
      tags:
        - Autenticação
      summary: Fazer login
      description: Autentica um usuário e retorna um token JWT para acesso aos endpoints protegidos
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            examples:
              exemplo1:
                summary: Login de usuário
                value:
                  email: joao@example.com
                  password: SenhaForte123!
      responses:
        '202':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
              examples:
                exemplo1:
                  summary: Login bem-sucedido
                  value:
                    id: 1
                    email: joao@example.com
                    roles:
                      - authority: ROLE_USER
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/blog/users:
    post:
      tags:
        - Usuários
      summary: Criar novo usuário
      description: Cria um novo usuário no sistema. Requer autenticação.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
            examples:
              exemplo1:
                summary: Criar usuário admin
                value:
                  name: Admin User
                  email: admin@example.com
                  password: AdminPass123!
                  roleUser: ADMIN
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          description: Dados inválidos fornecidos
        '401':
          description: Não autenticado
    
    get:
      tags:
        - Usuários
      summary: Listar todos os usuários
      description: Retorna uma lista com todos os usuários cadastrados no sistema
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGetResponse'
              examples:
                exemplo1:
                  summary: Lista de usuários
                  value:
                    - id: 1
                      name: João Silva
                      email: joao@example.com
                      role: USER
                      createAt: '2025-01-15T10:30:00Z'
                      updateAt: '2025-01-15T10:30:00Z'
                    - id: 2
                      name: Admin User
                      email: admin@example.com
                      role: ADMIN
                      createAt: '2025-01-15T11:00:00Z'
                      updateAt: '2025-01-15T11:00:00Z'
        '401':
          description: Não autenticado
    
    delete:
      tags:
        - Usuários
      summary: Deletar usuário
      description: Remove um usuário do sistema. Apenas o próprio usuário ou um administrador podem deletar.
      operationId: deleteUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeleteRequest'
            examples:
              exemplo1:
                summary: Deletar usuário
                value:
                  id: 1
      responses:
        '202':
          description: Usuário deletado com sucesso
          content:
            text/plain:
              schema:
                type: string
                example: User deleted with success
        '401':
          description: Não autenticado
        '403':
          description: Sem permissão para deletar este usuário
        '404':
          description: Usuário não encontrado
    
    patch:
      tags:
        - Usuários
      summary: Editar usuário
      description: Atualiza as informações de um usuário. Apenas o próprio usuário ou um administrador podem editar.
      operationId: editUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditRequest'
            examples:
              exemplo1:
                summary: Editar nome e email
                value:
                  id: 1
                  name: João Silva Santos
                  email: joao.santos@example.com
      responses:
        '202':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEditResponse'
        '400':
          description: Dados inválidos fornecidos
        '401':
          description: Não autenticado
        '403':
          description: Sem permissão para editar este usuário
        '404':
          description: Usuário não encontrado

  /api/blog/users/{id}:
    get:
      tags:
        - Usuários
      summary: Buscar usuário por ID
      description: Retorna os dados de um usuário específico pelo seu ID
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID do usuário
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
              examples:
                exemplo1:
                  summary: Dados do usuário
                  value:
                    id: 1
                    name: João Silva
                    email: joao@example.com
                    role: USER
                    createAt: '2025-01-15T10:30:00Z'
                    updateAt: '2025-01-15T10:30:00Z'
        '401':
          description: Não autenticado
        '404':
          description: Usuário não encontrado

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Insira o token JWT obtido no endpoint /api/blog/auth/login

  schemas:
    UserRegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          maxLength: 30
          description: Nome do usuário
          example: João Silva
        email:
          type: string
          maxLength: 150
          format: email
          description: Email do usuário
          example: joao@example.com
        password:
          type: string
          maxLength: 180
          format: password
          description: Senha do usuário
          example: SenhaForte123!

    UserRegisterResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        name:
          type: string
          maxLength: 30
          description: Nome do usuário
          example: João Silva
        email:
          type: string
          maxLength: 150
          format: email
          description: Email do usuário
          example: joao@example.com
        roleUser:
          $ref: '#/components/schemas/RoleUser'

    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email do usuário
          example: joao@example.com
        password:
          type: string
          format: password
          description: Senha do usuário
          example: SenhaForte123!

    UserLoginResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        email:
          type: string
          format: email
          description: Email do usuário
          example: joao@example.com
        roles:
          type: array
          description: Roles do usuário
          items:
            type: object
            properties:
              authority:
                type: string
                example: ROLE_USER
        token:
          type: string
          description: Token JWT para autenticação
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UserCreateRequest:
      type: object
      required:
        - name
        - email
        - password
        - roleUser
      properties:
        name:
          type: string
          maxLength: 30
          description: Nome do usuário
          example: Admin User
        email:
          type: string
          maxLength: 150
          format: email
          description: Email do usuário
          example: admin@example.com
        password:
          type: string
          maxLength: 180
          format: password
          description: Senha do usuário
          example: AdminPass123!
        roleUser:
          $ref: '#/components/schemas/RoleUser'

    UserCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        name:
          type: string
          maxLength: 30
          description: Nome do usuário
          example: Admin User
        email:
          type: string
          maxLength: 150
          format: email
          description: Email do usuário
          example: admin@example.com
        roleUser:
          $ref: '#/components/schemas/RoleUser'

    UserGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        name:
          type: string
          description: Nome do usuário
          example: João Silva
        email:
          type: string
          format: email
          description: Email do usuário
          example: joao@example.com
        role:
          $ref: '#/components/schemas/RoleUser'
        createAt:
          type: string
          format: date-time
          description: Data de criação do usuário
          example: '2025-01-15T10:30:00Z'
        updateAt:
          type: string
          format: date-time
          description: Data da última atualização
          example: '2025-01-15T10:30:00Z'

    UserEditRequest:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        name:
          type: string
          maxLength: 30
          description: Nome do usuário
          example: João Silva Santos
        email:
          type: string
          maxLength: 150
          format: email
          description: Email do usuário
          example: joao.santos@example.com

    UserEditResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário
          example: 1
        name:
          type: string
          maxLength: 30
          description: Nome do usuário
          example: João Silva Santos
        email:
          type: string
          maxLength: 150
          format: email
          description: Email do usuário
          example: joao.santos@example.com

    UserDeleteRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: ID do usuário a ser deletado
          example: 1

    RoleUser:
      type: string
      enum:
        - USER
        - ADMIN
      description: Role do usuário no sistema
      example: USER

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Mensagem de erro
          example: Dados inválidos fornecidos
        status:
          type: integer
          description: Código de status HTTP
          example: 400
